ssh-keygen -t rsa -C lisongs@bupt.edu.cn

git config --global user.name lisongs1995
git config --global user.email lisongs@bupt.edu.cn

git init

git add readme.txt
git commit -m "ad info"
git status
git diff readme.txt #比较暂存区与工作区的文件变化

git log 查看提交历史，确定要回退到过去哪个版本
git reflog 查看命令历史 commit id，要回到未来的哪个版本
git reset --hard commit_id
git diff HEAD -- readme.txt 比较版本库与工作区的文件diff

git checkout -- file 把file在工作区的修改全部撤销 没啥用
git reset HEAD file 把暂存区的修改撤销掉

git rm file
git commit -m "remove"

如果误删除了，版本库还有呢，可以回复
git checkout -- file

git remote add origin git@github.com:lisongs/repo.git
git push -u origin master 第一次关联版本库
git push origin master

HEAD  版本
master 分支

git checkout -b dev = git branch dev; git checkout dev

查看分支  git branch
创建分支 git branch dev
切换分支 git checkout branch
创建+切换分支 git checkout -b name
合并某分支到当前分支 git merge branch
删除分支 git branch -d dev

git checkout master
git checkout -b feature1

解决问题后再次添加提交
git log --graph --pretty=oneline --abbrev-commit


ban no fast forwarding


git checkout -b 'issue-101'
git merge --no-ff -m "have commit id" dev
git log

bug  分支
git stash

git stash apply
git drop stash

or

git stash drop


可以多次stash
git stash list查看，恢复指定的stash
git stash apply stash@{0}

强行删除某一个feature分支
git branch -D feature


iii


git remote
git remote -v

git push origin master
git push origin dev


多人开发

git checkout -b dev origin/dev clone后看不到dev分支
如果一个人已经推送到dev分支了

你就会推送失败
git branch --set-upstream dev origin/dev  指定本地dev与远程origin/dev分支的链接
git pull

然后手动解决冲突再提交
git push origin HEAD:ref/for/master
